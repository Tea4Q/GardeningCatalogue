import { useState, useEffect } from 'react';
import {
  FlatList,
  View,
  Text,
  StyleSheet,
  style,
  Pressable,
  onPress,
  Image,
  TextInput,
} from 'react-native';
import { FlashList } from '@shopify/flash-list';
import { Plus, Filter, Calendar } from 'lucide-react-native';
import { Link, useRouter, router, useLocalSearchParams } from 'expo-router';
import { Seed } from '../../types/seed';
import { EditSeed } from '../../components/EditSeed';

import Animated, {
  useAnimatedStyle,
  withTiming,
  withSequence,
  withDelay,
} from 'react-native-reanimated';

import { DatePicker } from '@mui/x-date-pickers';
import { AdapterDateFns } from '@mui/x-date-pickers/AdapterDateFnsV3';
import CalendarTodayIcon from '@mui/icons-material/CalendarToday';
import { AdapterDayjs } from '@mui/x-date-pickers/AdapterDayjs';
import { LocalizationProvider } from '@mui/x-date-pickers/LocalizationProvider';
import * as ImagePicker from 'expo-image-picker';
import { createClient } from '@supabase/supabase-js';
import DateTimePicker from '@react-native-community/datetimepicker';

const supabaseUrl = process.env.NEXT_PUBLIC_SUPABASE_URL || '';
const supabaseKey = process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY || '';

export const supabase = createClient(supabaseUrl, supabaseKey);

import { useLocalSearchParams } from 'expo-router';

export default function EditSeedScreen() {
  const { seed } = useLocalSearchParams(); // Retrieve the seed parameter
  const editingSeed = seed ? JSON.parse(seed) : null;

  const [isEditFormVisible, setIsEditFormVisible] = useState(false);
  const [editingSeed, setEditingSeed] = useState<Seed | null>(null);
  const [seeds, setSeeds] = useState<Seed[]>([]);
  const [formData, setFormData] = useState<Seed | null>(null);
  const [date, setDate] = useState(new Date());

  useEffect(() => {
    if (editingSeed) {
      setFormData(editingSeed);
    }
  }, [editingSeed]);

  const handleEditSeed = (seed: Seed) => {
    router.push({
      pathname: '/editSeed',
      params: { seeed: JSON.stringify(seed) },
    });
    setEditingSeed(seed);
    setIsEditFormVisible(true);
  };

  const handleSaveSeed = async (updatedSeed: Seed) => {
    if (!updatedSeed.name || !updatedSeed.quantity) {
      console.error('Invalid seed data');
      return;
    }
    try {
      const { data, error } = await supabase
        .from('seeds')
        .update({
          seed_image: updatedSeed.seedImage,
          name: updatedSeed.name,
          quantity: updatedSeed.quantity,
          type: updatedSeed.type,
          description: updatedSeed.description,
          supplier_id: updatedSeed.supplier_id,
          date_purchased: updatedSeed.date_purchased,
          seed_price: updatedSeed.seed_price,
          planting_depth: updatedSeed.planting_depth,
          spacing: updatedSeed.spacing,
          watering_requirements: updatedSeed.watering_requirements,
          sunlight: updatedSeed.sunlight,
          soil_type: updatedSeed.soil_type,
          storage_location: updatedSeed.storage_location,
          storage_requirements: updatedSeed.storage_requirements,
          germination_rate: updatedSeed.germination_rate,
          fertilizer_requirements: updatedSeed.fertilizer_requirements,
          days_to_germinate: updatedSeed.days_to_germinate,
          days_to_harvest: updatedSeed.days_to_harvest,
          planting_season: updatedSeed.planting_season,
          harvest_season: updatedSeed.harvest_season,
          notes: updatedSeed.notes,
        })
        .eq('id', updatedSeed.id);

      if (error) throw error;

      // Refresh the seed list
      fetchSeeds();
      setIsEditFormVisible(false);
      setEditingSeed(null);
    } catch (err) {
      console.error('Error updating seed:', err);
    }
  };

  const handleDateChange = (event: any, selectedDate?: Date) => {
    setDate(selectedDate || date);
    setFormData({
      ...formData,
      date_purchased: selectedDate?.toISOString() || '',
    });
  };

  const handleSave = () => {
    onSave(formData);
  };
  const handleCancel = () => {
    onCancel();
  };

  function onSave(formData: any) {
    throw new Error('Function not implemented.');
  }

  function onCancel() {
    throw new Error('Function not implemented.');
  }

  const fetchSeeds = async () => {
    try {
      const { data, error } = await supabase
        .from('seeds')
        .select('*')
        .ilike('name', `%${searchQuery}%`)
        .order('name', { ascending: true });

      if (error) throw error;
      setSeeds(data);
    } catch (err) {
      console.error('Error fetching seeds:', err);
    }
  };

  useEffect(() => {
    fetchSeeds();
  }, [searchQuery]);

  const handlePickImage = async () => {
    const result = await ImagePicker.launchImageLibraryAsync({
      mediaTypes: ImagePicker.MediaTypeOptions.Images,
      allowsEditing: true,
      quality: 1,
    });
    if (!result.canceled && result.assets?.length > 0) {
      setFormData((prev) => ({ ...prev, seed_image: result.assets[0].uri }));
    }
  };

  const renderSeedItem = ({ item }: { item: Seed }) => (
    <Pressable onPress={() => handleEditSeed(item)}>
      <View style={styles.row}>
        <Text>{item.name}</Text>
      </View>
    </Pressable>
  );

  return (
    <View style={styles.container}>
      {isEditFormVisible && editingSeed && (
        <EditSeed
          seed={editingSeed}
          onSave={handleSaveSeed}
          onCancel={() => setIsEditFormVisible(false)}
        />
      )}
      <FlatList
        data={seeds}
        renderItem={renderSeedItem}
        keyExtractor={(seed) => seed.id.toString()}
      />
      <DateTimePicker
        value={date}
        mode="date"
        display="default"
        onChange={handleDateChange}
      />
    </View>
  );
}

const styles = StyleSheet.create({
  container: {
    flex: 1,
    backgroundColor: '#f0f9f0',
  },
  header: {
    flexDirection: 'row',
    alignItems: 'center',
    padding: 16,
    backgroundColor: '#336633',
    borderBottomLeftRadius: 24,
    borderBottomRightRadius: 24,
  },
  row: {
    flexDirection: 'row',
    alignItems: 'center',
    gap: 8,
  },
  editForm: {
    padding: 16,
    backgroundColor: '#ffffff',
    borderRadius: 8,
    margin: 16,
  },
  label: {
    fontSize: 16,
    fontWeight: 'bold',
    marginBottom: 8,
  },
  input: {
    borderWidth: 1,
    borderColor: '#cccccc',
    borderRadius: 4,
    padding: 8,
    marginBottom: 16,
  },
  imagePreview: {
    width: 100,
    height: 100,
    marginBottom: 16,
  },
  imageButton: {
    backgroundColor: '#007bff',
    padding: 8,
    borderRadius: 4,
  },
  imageButtonText: {
    color: '#ffffff',
    fontWeight: 'bold',
  },
  datePickerContainer: {
    flexDirection: 'row',
    alignItems: 'center',
    borderWidth: 1,
    borderColor: '#cccccc',
    borderRadius: 4,
    padding: 8,
    marginBottom: 16,
  },
  calendarIcon: {
    marginLeft: 8,
    color: '#007bff',
  },
  errorText: {
    color: '#dc2626',
    marginTop: 4,
  },
  buttonContainer: {
    flexDirection: 'row',
    justifyContent: 'space-between',
  },
  saveButton: {
    backgroundColor: '#2d7a3a',
    padding: 12,
    borderRadius: 4,
  },
  saveButtonText: {
    color: '#ffffff',
    fontWeight: 'bold',
  },
  cancelButton: {
    backgroundColor: '#dc2626',
    padding: 12,
    borderRadius: 4,
  },
  cancelButtonText: {
    color: '#ffffff',
    fontWeight: 'bold',
  },
  editButton: {
    marginTop: 8,
    backgroundColor: '#007bff',
    padding: 8,
    borderRadius: 4,
  },
  editButtonText: {
    color: '#ffffff',
    fontWeight: 'bold',
  },
});
